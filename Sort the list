def sortList(self, head):
        def midelement(head):
            if head is None or head.next is None:
                return head
            slow=head
            fast=head
            while fast.next is not None and fast.next.next is not None:
                slow=slow.next
                fast=fast.next.next
            return slow
        def mergesort(head):
            if head is None or head.next is None:
                return head
            h1=head
            mid=midelement(head)
            h2=mid.next
            mid.next=None
            left=mergesort(h1)
            right=mergesort(h2)
            return merge(left,right)
        def merge(left,right):
            if left is None and right is None:
                return None
            if left is None:
                return right
            if right is None:
                return left
            finalhead=None
            finaltail=None
            while left is not None and right is not None:
                if left.val<right.val:
                    if finalhead is None:
                        finalhead=left
                        finaltail=left
                    else:
                        finaltail.next=left
                        finaltail=finaltail.next
                    left=left.next
                else:
                    if finalhead is None:
                        finalhead=right
                        finaltail=right
                    else:
                        finaltail.next=right
                        finaltail=finaltail.next
                    right=right.next
            while left is not None:
                finaltail.next=left
                finaltail=finaltail.next
                left=left.next
            while right is not None:
                finaltail.next=right
                finaltail=finaltail.next
                right=right.next
            return finalhead
        return mergesort(head)
